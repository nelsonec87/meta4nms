{
  "name": "node-nms",
  "version": "0.0.9",
  "description": "A lightweight infrastructure monitoring framework for NodeJS",
  "main": "src/start.js",
  "scripts": {
    "start": "node src/start.js"
  },
  "keywords": [
    "meta4",
    "meta4beta",
    "meta4life"
  ],
  "author": {
    "name": "Troven",
    "email": "NodeNMS@troven.com.au",
    "url": "http://NodeNMS.org/"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/troven/node-nms.git"
  },
  "dependencies": {
    "pcap": "^2.0.1",
    "ping": "^0.1.10",
    "rethinkdb": "^2.0.0-2",
    "underscore": "^1.8.3"
  },
  "devDependencies": {},
  "preferGlobal": true,
  "bin": {},
  "readme": "NODE-NMS\n--------\n\nA light-weight, event-driven, high-speed Network Management kernel for NodeJS. \n\nnode-nms was designed to be embedded into a larger application but it's well suited to head-less DevOps too.\n\nPresently, it measures responsive times and uptime and can passively auto-detect devices. \n\nWe support two monitoring strategies - passive probes and active Sensors. \n\nBoth are easily extended with super-simple plugins.\n\nnode-nms emits events when devices come online, go offline or when data is received from a Probe or Sensor.\n\nIt's missing central configuration, persistence, a UI, alarms and other not-quite essentials - quite deliberately.\n\nYou see, we built node-nms as the underlying engine that (will) power \"meta4nms\" - an open source, real-time, Infrastructure Analytics application. We hope you'll check that out soon too.\n\nArchitecture\n------------\n\nThe node-nms library is designed to take advantage of NodeJS's event-driven, asychronous architecture.\n\nIt uses (and requires) non-blocking IO throughout - so care should be taken when building custom Probes and Sensors that they do not cause a deadlock or perform indulgent algorithms.\n\nThere are 4 main components - Devices, Probes, Sensors and Telemetry. They are discussed below.\n\nIt's pretty simple really. The exciting part is what you can do with an easy to integrate network telemetry tool inside your environment. \n\nInstallation\n------------\n\nThat said, it's fairly easy to work with the ./src/start.js file is a good place to start.\n\n\tgit clone https://github.com/troven/node-nms.git\n\tcd node-nms\n\tnode src/start\n\nOr, If you're reckless enough to include it into your own projects:\n\n\tvar nms = require(\"node-nms\")\n\nUsage\n-----\n\nSetup a monitored environment / zone using a Telemetry broker:\n\n\tvar telemetry = new nms.Telemetry()\n\t\nUse Ping, SNMP and Web port scans:\n\n\ttelemetry.uses( new nms.Probe( { probe: \"ICMP\" } ) )\n\ttelemetry.uses( new nms.Probe( { probe: \"SNMP\", \"community\": \"public\", \"oid\": [1,3,6,1,2,1,1,3,0] } ) )\n\ttelemetry.uses( new nms.Probe( { probe: \"TCP\", \"port\": 80 } ) )\n\nOr promiscuously listen for network activity:\n\n\ttelemetry.uses( new nms.Sensor( { sensor: \"PCAP\", \"interface\": \"en0\" } ) )\n\t\nConfigure the hosts to be monitored:\n\n\tvar localhost = new nms.Device( { host: \"localhost\" } )\n\ttelemetry.monitors(localhost)\n\nListen for events from Probes or Sensors:\n\n\tlocalhost.on(\"online\", function() {\n\t\tconsole.log(this.host(), \"is online\")\n\t})\n\n\tlocalhost.on(\"offline\", function() {\n\t\tconsole.log(this.host(), \"is offline\")\n\t})\n\nStart polling ... NOTE: the interval is in seconds. \n\n\tnms.poll(telemetry, 1)\n\nDevices\n-------\n\nA device is a simple encapsulation of the settings and state of a monitored endpoint.\n\nThe Device maintains minimal internal state - firstContacted, lastContacted & isOnline.\n\nIt also provides some convenience methods such as device.host() and device.uptime().\n\nThe Telemetry module treats all devices equally and will run the same probes on each registered device.\n\nDevices that don't or can't support a particular Probe can opt-out:\n\n\tvar localhost = new nms.Device( { host: \"localhost\", \"probes\": { \"SNMP\": false } } )\n\n\tconsole.log(localhost.host(), localhost.allows(\"SNMP\"))\n\nBy default, all Probes are enabled. If any explict probes are declared, the list acts as a white-list only\npermitting explicitly enabled probes to poll that device. \n\nSensors cannot be manually excluded, this will change soon.\n\nProbes\n------\n\nA Probe is an active agent, it works by synchronously polling the device for information.\n\nProbes are great for measuring responsive time of remote services using synthetic transactions.\n\nTelemetry data is acquired by listening for \"poll\" events being emitted from the device.\n\nThey are used for remote data collection too, such as with SNMP.\n\nAn obvious Probe would interrogate a web page or API service and return parsed results.\n\n\n\tICMP \t- the classic ping probe\n\tTCP\t \t- simple, effective TCP port probe\n\tSNMP\t- ubiquitious network infrastructure polling\n\n\tUDP\t\t- coming soon\n\tHTTP\t- coming soon\n\tHTTPS\t- coming soon\n\tJMX\t\t- coming soon\n\tWMI\t\t- coming soon\n\tNagios\t- coming soon\n\tSQL\t\t- coming soon\n\nA Probe retains no state between devices or invocations.\n\nSensors\n-------\n\nA Sensor is a reactive agent. It asynchronously listens for events from some source and injects them into \nthe NodeNMS core.\n\nAs a result, they are much simpler to create and configure. The remote endpoint does most of the work, node-nms should simply make some basic decisions and forward the event to Telemtry.\n\nA sensor is a long-running process - it will listen until it you tell it to stop(). They are quite light weight, and should store no or very minimal state.\n\nSensors provide situation awareness, a sensor notifies node-nms whenever a new device or service appears.\n\nThe PCAP sensor is a good example, another might be observing an IoT node using MQTT\n\nIn the next release, a REST-ful API callback will allow 3rd party scripts to inject events.\n\n\tPCAP\t- device discovery based on libpcap\n\n\tREST\t- coming soon\n\tPubSub\t- coming soon\n\tMQ\t\t- coming soon\n\tXMPP\t- coming soon\n\nTelemetry data is acquired by listening for \"discover\" events being emitted from the Telemetry broker.\n\nTelemetry\n---------\n\nThe Telemetry class represents a network vantage point from which Sensor can observe and Probe can poll.\n\nTypically, it will be deployed on a small NodeJS server that sends it results back to a central database.\n\nThe meta4nms project is a sister project, a self-contained NMS, that uses RethinkDB as a central repository for telemetry data as well as handling correlations, aggregation and analytics.\n\nAuto Discovery\n--------------\n\nThis is a big and very interesting topic. Here are some ideas to get you started.\n\n1) Simply to listen for \"discover\" events being emitted from the Telemetry broker. For example, using PCAP whenever a new device uses the network.\n\n2) A manual ping or other Probe sweep across some range of services/devices.\n\n3) Perform a getTable on the SNMP ARP table and use that to seed discovery \n\n4) Implement SNMP Traps and generate Sensor 'discover' events.\n\n5) any more ideas?\n\nEvent Correlation\n-----------------\n\nThis is another big topic, and one best postponed until another day :-)\n\nPlug Ins\n--------\n\nProbe\n\n\tmodule.exports = function(device, options, cb) {\n\t\t// measure something\n\t\t// trigger meaningful device events\n\t\t// return result\n\t}\n\nSensor\n\n\tmodule.exports = function(options) {\n\t\t// observe something\n\t\t// trigger meaningful mode-nms events\n\t\t// return result\n\t}\n\n** A sensor must also implement\n\nData Modelling\n--------------\n\nThe data-carrying events that are triggered by node-nms share a unified response format.\n\n\t{\n\t\tmeta: { ... about the agent - usually configuration options ... }\n\t\tdata: [],\n\t\tresponseTime: 0\n\t}\n\nThe \"data\" attribute contains the payload data from the probe or sensor.\n\nLicense\n-------\n\n\t(c) 2015 Troven Software. Authored by Lee Curtis and contributors\n\tLicensed under an Apache 2.0 open source license.\n\nComing soon\n-----------\n\nThis is an experimental project, and as such there will be huge bursts of activity and many improvements.\n\nThe general contracts - the event signatures and APIs are fairly robust. But ... we make no promises and your mileage may vary as we bump up those versions.\n\nOf course, we'd love you to lend a hand ...\n",
  "readmeFilename": "README.md",
  "gitHead": "2be58b595f8c3d0b5762cf324f663877de66a234",
  "bugs": {
    "url": "https://github.com/troven/node-nms/issues"
  },
  "homepage": "https://github.com/troven/node-nms",
  "_id": "node-nms@0.0.9",
  "_shasum": "0c233e02a4479186a0932b7137c029f4d88a8e3d",
  "_from": "node-nms@>=0.0.9 <0.1.0"
}
